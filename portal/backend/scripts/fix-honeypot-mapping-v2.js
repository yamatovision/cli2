/**
 * HONEYPOT_DB„ÅÆoriginalPromptId„ÇíÊú¨Áâ©„ÅÆID„Å´‰øÆÊ≠£„Åô„Çã„Çπ„ÇØ„É™„Éó„ÉàÔºàÈáçË§áÂØæÂøúÁâàÔºâ
 */
const mongoose = require('mongoose');
const TrapPrompt = require('../models/trapPrompt.model');
const honeypotConnection = require('../config/honeypot-db.config');

// Ê≠£„Åó„ÅÑ„Éû„ÉÉ„Éî„É≥„Ç∞ÔºàÊú¨Áâ©„ÅÆ„Éó„É≠„É≥„Éó„ÉàIDÔºâ
const CORRECT_ID_MAPPING = {
  '#0 „Ç™„Éº„Ç±„Çπ„Éà„É¨„Éº„Çø„Éº': '6862397f1428c1efc592f6cc',
  '#1 Ë¶Å‰ª∂ÂÆöÁæ©„Ç®„É≥„Ç∏„Éã„Ç¢': '6862397f1428c1efc592f6ce',
  '#2 UI/UX„Éá„Ç∂„Ç§„Éä„Éº': '6862397f1428c1efc592f6d0',
  '#3 „Éá„Éº„Çø„É¢„Éá„É™„É≥„Ç∞„Ç®„É≥„Ç∏„Éã„Ç¢': '6862397f1428c1efc592f6d2',
  '#4 „Ç∑„Çπ„ÉÜ„É†„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„Éà': '6862397f1428c1efc592f6d4',
  '#5 ÂÆüË£Ö„Ç≥„É≥„Çµ„É´„Çø„É≥„Éà': '6862397f1428c1efc592f6d6',
  '#6 Áí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó': '6862397f1428c1efc592f6d8',
  '#7 „Éó„É≠„Éà„Çø„Ç§„ÉóÂÆüË£Ö': '6862397f1428c1efc592f6da',
  '#8 „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÂÆüË£Ö': '6862397f1428c1efc592f6dc',
  '#9 „ÉÜ„Çπ„Éà„ÉªÂìÅË≥™Ê§úË®º': '6862397f1428c1efc592f6de',
  '#10 APIÁµ±Âêà': '6862397f1428c1efc592f6e0',
  '#11 „Éá„Éê„ÉÉ„Ç∞Êé¢ÂÅµ': '6862397f1428c1efc592f6e2',
  '#12 „Éá„Éó„É≠„Ç§„Çπ„Éö„Ç∑„É£„É™„Çπ„Éà': '6862397f1428c1efc592f6e4',
  '#13 GitHub„Éû„Éç„Éº„Ç∏„É£„Éº': '6862397f1428c1efc592f6e6',
  '#14 TypeScript„Éû„Éç„Éº„Ç∏„É£„Éº': '6862397f1428c1efc592f6e8',
  '#15 Ê©üËÉΩÊã°Âºµ': '6862397f1428c1efc592f6ea',
  '#16 „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞„Ç®„Ç≠„Çπ„Éë„Éº„Éà': '6862397f1428c1efc592f6ec'
};

async function fixHoneypotMapping() {
  try {
    console.log('üîß HONEYPOT_DB„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞„Çí‰øÆÊ≠£„Åó„Åæ„Åô...\n');
    
    // Êé•Á∂ö„ÇíÂæÖ„Å§
    await new Promise((resolve) => {
      if (honeypotConnection.readyState === 1) {
        resolve();
      } else {
        honeypotConnection.once('connected', resolve);
      }
    });
    
    // „Åæ„ÅöÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
    console.log('ÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç‰∏≠...\n');
    const allPrompts = await TrapPrompt.find({});
    const idUsageMap = {};
    
    // „Å©„ÅÆID„Åå„Å©„Åì„Åß‰Ωø„Çè„Çå„Å¶„ÅÑ„Çã„ÅãË™øÊüª
    allPrompts.forEach(prompt => {
      if (!idUsageMap[prompt.originalPromptId]) {
        idUsageMap[prompt.originalPromptId] = [];
      }
      idUsageMap[prompt.originalPromptId].push(prompt.title);
    });
    
    // ÈáçË§á„ÇíÂ†±Âëä
    console.log('ÈáçË§á„Åó„Å¶„ÅÑ„ÇãoriginalPromptId:');
    for (const [id, titles] of Object.entries(idUsageMap)) {
      if (titles.length > 1) {
        console.log(`  ${id}: ${titles.join(', ')}`);
      }
    }
    console.log('');
    
    // ÂêÑ„Éó„É≠„É≥„Éó„Éà„ÇíÊõ¥Êñ∞ÔºàÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ‰ªò„ÅçÔºâ
    for (const [title, correctId] of Object.entries(CORRECT_ID_MAPPING)) {
      const trapPrompt = await TrapPrompt.findOne({ title });
      
      if (trapPrompt) {
        const oldId = trapPrompt.originalPromptId;
        
        // Êó¢„Å´Ê≠£„Åó„ÅÑID„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
        if (oldId === correctId) {
          console.log(`‚è≠Ô∏è  ${title} - Êó¢„Å´Ê≠£„Åó„ÅÑID`);
          continue;
        }
        
        // ‰ªñ„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÅåÂêå„ÅòID„Çí‰Ωø„Å£„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
        const conflicting = await TrapPrompt.findOne({ 
          originalPromptId: correctId,
          _id: { $ne: trapPrompt._id }
        });
        
        if (conflicting) {
          console.log(`‚ö†Ô∏è  ${title}`);
          console.log(`   Á´∂Âêà: ${conflicting.title} „ÅåÊó¢„Å´ ${correctId} „Çí‰ΩøÁî®‰∏≠`);
          console.log(`   ‰∏ÄÊôÇÁöÑ„Å´ null „Å´Ë®≠ÂÆö`);
          
          // ‰∏ÄÊôÇÁöÑ„Å´null„Å´Ë®≠ÂÆö
          trapPrompt.originalPromptId = null;
          await trapPrompt.save();
        } else {
          trapPrompt.originalPromptId = correctId;
          await trapPrompt.save();
          
          console.log(`‚úÖ ${title}`);
          console.log(`   Êóß: ${oldId}`);
          console.log(`   Êñ∞: ${correctId}`);
        }
        console.log('');
      } else {
        console.log(`‚ùå ${title} „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì\n`);
      }
    }
    
    // Á¨¨2„Éë„Çπ: null„Å´„Å™„Å£„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„Çí‰øÆÊ≠£
    console.log('\nÁ¨¨2„Éë„Çπ: ‰∏ÄÊôÇÁöÑ„Å´null„Å´„Åó„Åü„ÇÇ„ÅÆ„Çí‰øÆÊ≠£...\n');
    
    for (const [title, correctId] of Object.entries(CORRECT_ID_MAPPING)) {
      const trapPrompt = await TrapPrompt.findOne({ 
        title,
        originalPromptId: null 
      });
      
      if (trapPrompt) {
        trapPrompt.originalPromptId = correctId;
        await trapPrompt.save();
        console.log(`‚úÖ ${title} ‚Üí ${correctId}`);
      }
    }
    
    console.log('\nüéâ ‰øÆÊ≠£„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n');
    
    // ‰øÆÊ≠£Âæå„ÅÆÁ¢∫Ë™ç
    console.log('‰øÆÊ≠£Âæå„ÅÆÁä∂ÊÖã:');
    console.log('='.repeat(80));
    const updatedPrompts = await TrapPrompt.find({})
      .select('title originalPromptId')
      .sort({ title: 1 });
    
    updatedPrompts.forEach(prompt => {
      const isCorrect = CORRECT_ID_MAPPING[prompt.title] === prompt.originalPromptId;
      const status = isCorrect ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${prompt.title} ‚Üí ${prompt.originalPromptId}`);
    });
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
  } finally {
    await honeypotConnection.close();
    process.exit(0);
  }
}

// ÂÆüË°å
fixHoneypotMapping();