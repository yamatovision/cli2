/**
 * AppGenius VSCode Extension メインエントリーポイント
 * 
 * 【認証システムリファクタリング 2025/03/23】
 * - 現在、2つの認証システムが並行して存在しています：
 *   1. 従来の認証システム: AuthenticationService + TokenManager
 *   2. 新しい認証システム: SimpleAuthManager + SimpleAuthService
 * 
 * - 認証システムリファクタリングにより、SimpleAuthManagerとSimpleAuthServiceを優先使用します
 * - 後方互換性のため、古い認証サービスも維持していますが、将来的には完全に削除します
 * - PermissionManagerは両方の認証サービスに対応するよう更新されています
 * - パネル/コンポーネントは、AuthGuardを通じてPermissionManagerを使用します
 * 
 * 詳細は auth-system-refactoring-scope.md を参照
 */

import * as vscode from 'vscode';
import * as path from 'path';
import { StatusBar } from './ui/statusBar';
import { Logger, LogLevel } from './utils/logger';
import { TerminalInterface } from './ui/TerminalInterface';
import { CommandHandler } from './ui/CommandHandler';
import { FileOperationManager } from './utils/fileOperationManager';
import { MockupGalleryPanel } from './ui/mockupGallery/MockupGalleryPanel';
import { AppGeniusEventBus, AppGeniusEventType } from './services/AppGeniusEventBus';
import { ClaudeCodeApiClient } from './api/claudeCodeApiClient';
import { ProjectManagementService } from './services/ProjectManagementService';
import { PlatformManager } from './utils/PlatformManager';
import { ScopeExporter } from './utils/ScopeExporter';
import { MessageBroker } from './utils/MessageBroker';
import { ScopeManagerPanel } from './ui/scopeManager/ScopeManagerPanel';
// 未使用コンポーネントは削除済み
import { SimpleAuthManager } from './core/auth/SimpleAuthManager';
import { SimpleAuthService } from './core/auth/SimpleAuthService';
import { PermissionManager } from './core/auth/PermissionManager';
import { registerAuthCommands } from './core/auth/authCommands';
import { registerFileViewerCommands } from './commands/fileViewerCommands'; // ファイルビューワーコマンド
import { EnvVariablesPanel } from './ui/environmentVariables/EnvVariablesPanel';
import { AuthGuard } from './ui/auth/AuthGuard';
import { Feature } from './core/auth/roles';
import { AuthStorageManager } from './utils/AuthStorageManager';
import { FileViewerPanel } from './ui/fileViewer/FileViewerPanel'; // 追加: ファイルビューワーパネル
import { NoProjectViewPanel } from './ui/noProjectView/NoProjectViewPanel'; // 追加: プロジェクト選択画面
// SimpleModelViewerPanel is removed - not needed anymore

// グローバル変数としてExtensionContextを保持（安全対策）
declare global {
	// eslint-disable-next-line no-var
	var __extensionContext: vscode.ExtensionContext;
	// SimpleAuthServiceインスタンスをグローバルに保持
	// eslint-disable-next-line no-var
	var _appgenius_simple_auth_service: any;
	// 認証トークンをグローバルに保持
	// eslint-disable-next-line no-var
	var _appgenius_auth_token: string;
	// 認証状態をグローバルに保持
	// eslint-disable-next-line no-var
	var _appgenius_auth_state: any;
	// 以前の新認証システム用のグローバル変数は使用されていません
	// eslint-disable-next-line no-var
	// var _appgenius_auth_module: any;
}

export function activate(context: vscode.ExtensionContext) {
  // グローバルにExtensionContextを保存（複数の方法で参照できるようにする）
  (global as any).__extensionContext = context;
  (global as any).extensionContext = context;
  (global as any).appgeniusContext = context; // 互換性のための追加変数

  Logger.info('グローバル拡張機能コンテキスト変数を設定しました');
	// ClaudeCodeApiClient用のコンテキスト設定
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	(global as any).appgeniusContext = context;

	// コンテキスト設定を記録
	Logger.info('グローバルコンテキスト変数が正常に設定されました');
	
	// ロガーの初期化（自動表示をオンにする）
	Logger.initialize('AppGenius AI', LogLevel.DEBUG, true);
	Logger.info('AppGenius AI が起動しました');
	
	// AppGenius AI クイックアクセスステータスバーアイテムを追加
	const appGeniusStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
	appGeniusStatusBarItem.text = "$(rocket) AppGenius";
	appGeniusStatusBarItem.tooltip = "AppGenius AIスコープマネージャーを開く";
	appGeniusStatusBarItem.command = "appgenius-ai.openScopeManager";
	appGeniusStatusBarItem.show();
	context.subscriptions.push(appGeniusStatusBarItem);
	
	
	// 自動起動設定の確認
	const config = vscode.workspace.getConfiguration('appgeniusAI');
	const autoStartDashboard = config.get('autoStartTerminal', true);
	
	// openDevelopmentAssistantコマンドを登録（リファクタリングによりScopeManagerに置き換え）
	context.subscriptions.push(
		vscode.commands.registerCommand('appgenius-ai.openDevelopmentAssistant', (params?: any) => {
			try {
				Logger.info('開発アシスタントを開くコマンドが実行されました（ScopeManagerに転送）');
				
				// DashboardPanel削除のため、代わりにScopeManagerを表示
				let projectPath: string | undefined;
				if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {
					projectPath = vscode.workspace.workspaceFolders[0].uri.fsPath;
				}
				
				// スコープマネージャーコマンドを実行
				vscode.commands.executeCommand('appgenius-ai.openScopeManager', projectPath);
				
				Logger.info('ScopeManagerに転送しました');
			} catch (error) {
				Logger.error('開発アシスタントを開く際にエラーが発生しました', error as Error);
				vscode.window.showErrorMessage(`開発アシスタントを開けませんでした: ${(error as Error).message}`);
			}
		})
	);
	
	// ログインコマンドを登録
	context.subscriptions.push(
		vscode.commands.registerCommand('appgenius-ai.login', async () => {
			try {
				Logger.info('ログインコマンドが実行されました');
				// 認証サーバーのヘルスチェック
				vscode.window.showInformationMessage('認証サーバーへの接続をチェック中...');
				
				// LoginWebviewPanelを使用してログインフォームを表示
				const { LoginWebviewPanel } = require('./ui/auth/LoginWebviewPanel');
				LoginWebviewPanel.createOrShow(context.extensionUri);
			} catch (error) {
				Logger.error('ログイン処理中にエラーが発生しました', error as Error);
				vscode.window.showErrorMessage(`ログインエラー: ${(error as Error).message}`);
			}
		})
	);
	
	// 認証デバッグコマンドを登録
	context.subscriptions.push(
		vscode.commands.registerCommand('appgenius-ai.authDebug', async () => {
			try {
				Logger.info('認証デバッグコマンドが実行されました');
				
				vscode.window.showInformationMessage('認証サーバーを診断中...');
				
				// SimpleAuthManagerのテストコマンドを実行
				await vscode.commands.executeCommand('appgenius.simpleAuth.test');
				
				vscode.window.showInformationMessage('認証サーバーの診断が完了しました。詳細はログを確認してください。');
			} catch (error) {
				Logger.error('認証デバッグ中にエラーが発生しました', error as Error);
				vscode.window.showErrorMessage(`認証デバッグエラー: ${(error as Error).message}`);
			}
		})
	);
	
	// 初回インストール時または自動起動が有効な場合にアプリケーションを起動
	if (autoStartDashboard) {
		// 少し遅延させてVSCodeの起動が完了してから処理
		setTimeout(() => {
			// プロジェクトパスを取得
			let projectPath: string | undefined;
			if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {
				projectPath = vscode.workspace.workspaceFolders[0].uri.fsPath;
			}
			
			// まず認証状態をチェック
			if (!AuthGuard.checkLoggedIn()) {
				// 未認証の場合はログイン画面を表示
				Logger.info('AppGenius AI起動時: 未認証のためログイン画面を表示します');
				// ログイン画面を表示（LoginWebviewPanelを使用）
				const { LoginWebviewPanel } = require('./ui/auth/LoginWebviewPanel');
				LoginWebviewPanel.createOrShow(context.extensionUri);
			} else if (AuthGuard.checkAccess(Feature.SCOPE_MANAGER)) {
				// 認証済みかつ権限がある場合のみスコープマネージャーを開く
				vscode.commands.executeCommand('appgenius-ai.openScopeManager', projectPath);
				Logger.info('AppGenius AIスコープマネージャーを自動起動しました');
			} else {
				// 認証済みだが権限がない場合
				Logger.warn('AppGenius AI起動時: 権限不足のためスコープマネージャーを表示しません');
				vscode.window.showWarningMessage('スコープマネージャーへのアクセス権限がありません。');
			}
		}, 2000);
	}
	
	// PlatformManagerの初期化
	const platformManager = PlatformManager.getInstance();
	platformManager.setExtensionContext(context);
	Logger.info('PlatformManager initialized successfully');
	
	// ScopeExporterの初期化
	ScopeExporter.getInstance();
	Logger.info('ScopeExporter initialized successfully');
	
	// 認証関連の初期化
	try {
		// AuthStorageManagerの初期化
		const authStorageManager = AuthStorageManager.getInstance(context);
		Logger.info('AuthStorageManager initialized successfully');
		
		// 認証状態変更イベントを監視するコマンド登録
		// !!!重要: このコマンドはSimpleAuthManagerからも使用されています!!!
		// コマンドの登録は必ずSimpleAuthManagerの初期化前に行う必要があります
		context.subscriptions.push(
			vscode.commands.registerCommand('appgenius.onAuthStateChanged', (isAuthenticated: boolean) => {
				try {
					Logger.info(`認証状態変更イベント: ${isAuthenticated ? '認証済み' : '未認証'}`);
					Logger.info('【デバッグ】appgenius.onAuthStateChangedコマンドが実行されました');
					// 認証済みの場合、自動的にスコープマネージャーを表示
					if (isAuthenticated && AuthGuard.checkAccess(Feature.SCOPE_MANAGER)) {
						Logger.info('【デバッグ】スコープマネージャー表示条件を満たしています - 表示を試みます');
						
						// プロジェクトパスを取得
						let projectPath: string | undefined;
						if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {
							projectPath = vscode.workspace.workspaceFolders[0].uri.fsPath;
						}
						
						// スコープマネージャーを開く
						ScopeManagerPanel.createOrShow(context.extensionUri, context, projectPath);
						Logger.info('【デバッグ】スコープマネージャー表示を要求しました');
					} else {
						if (!isAuthenticated) {
							Logger.info('【デバッグ】スコープマネージャー表示スキップ: 認証されていません');
						}
						if (!AuthGuard.checkAccess(Feature.SCOPE_MANAGER)) {
							Logger.info('【デバッグ】スコープマネージャー表示スキップ: 権限がありません');
						}
					}
				} catch (error) {
					Logger.error('認証状態変更ハンドラーでエラーが発生しました', error as Error);
				}
			})
		);

		// スコープマネージャーを開くコマンドの登録
		context.subscriptions.push(
			vscode.commands.registerCommand('appgenius-ai.openScopeManager', (projectPath: string) => {
				try {
					Logger.info(`スコープマネージャーを開くコマンドが実行されました: ${projectPath}`);
					
					// 認証状態を確認
					if (!AuthGuard.checkLoggedIn()) {
						Logger.info('スコープマネージャー: 未認証のためログイン画面に誘導します');
						// ログイン画面を表示（LoginWebviewPanelを使用）
						const { LoginWebviewPanel } = require('./ui/auth/LoginWebviewPanel');
						LoginWebviewPanel.createOrShow(context.extensionUri);
						return;
					}
					
					// 権限チェック
					if (!AuthGuard.checkAccess(Feature.SCOPE_MANAGER)) {
						Logger.warn('スコープマネージャー: 権限不足のためアクセスを拒否します');
						vscode.window.showWarningMessage('スコープマネージャーへのアクセス権限がありません。');
						return;
					}
					
					// 認証済みの場合のみパネルを表示
					ScopeManagerPanel.createOrShow(context.extensionUri, context, projectPath);
				} catch (error) {
					Logger.error('スコープマネージャーを開く際にエラーが発生しました', error as Error);
					vscode.window.showErrorMessage(`スコープマネージャーを開けませんでした: ${(error as Error).message}`);
				}
			})
		);
		
		// ファイルビューワーを開くコマンド（旧マークダウンビューワーの代替）
		context.subscriptions.push(
			vscode.commands.registerCommand('appgenius-ai.openFileViewer', (projectPath?: string) => {
				try {
					Logger.info(`ファイルビューワーを開くコマンドが実行されました: ${projectPath || 'パスなし'}`);
					
					// プロジェクトパスが指定されていない場合は、アクティブプロジェクトまたはワークスペースから取得
					if (!projectPath) {
						// プロジェクト管理サービスからアクティブプロジェクトパスを取得
						const projectService = ProjectManagementService.getInstance();
						const activeProject = projectService.getActiveProject();
						
						if (activeProject && activeProject.path) {
							projectPath = activeProject.path;
						} else if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {
							projectPath = vscode.workspace.workspaceFolders[0].uri.fsPath;
						}
					}
					
					// ファイルビューワーパネルを表示
					FileViewerPanel.createOrShow(context.extensionUri);
					Logger.info('ファイルビューワーパネルを表示しました');
				} catch (error) {
					Logger.error('ファイルビューワーを開く際にエラーが発生しました', error as Error);
					vscode.window.showErrorMessage(`ファイルビューワーを開けませんでした: ${(error as Error).message}`);
				}
			})
		);
		
		// マークダウンビューワーを開くコマンド（互換性のため）
		context.subscriptions.push(
			vscode.commands.registerCommand('appgenius-ai.openMarkdownViewer', (projectPath?: string) => {
				try {
					Logger.info(`マークダウンビューワーコマンドを受信 (FileViewerに転送): ${projectPath || 'パスなし'}`);
					// 新しいファイルビューワーコマンドにリダイレクト
					vscode.commands.executeCommand('appgenius-ai.openFileViewer', projectPath);
				} catch (error) {
					Logger.error('マークダウンビューワーリダイレクト中にエラーが発生しました', error as Error);
					vscode.window.showErrorMessage(`ファイルビューワーを開けませんでした: ${(error as Error).message}`);
				}
			})
		);
		
		// 環境変数アシスタント関連のコマンドは不要なため削除
		
		Logger.info('ScopeManager command registered successfully');
		
		// デバッグ探偵コマンド登録はリファクタリングで削除されました
		context.subscriptions.push(
			vscode.commands.registerCommand('appgenius-ai.openDebugDetective', (providedProjectPath?: string) => {
				try {
					Logger.info(`デバッグ探偵を開くコマンドが実行されましたが、このコンポーネントはリファクタリングで削除されました`);
					vscode.window.showInformationMessage('デバッグ探偵機能は現在利用できません。代わりにファイルビューワーをご利用ください。');
					
					// 代わりにファイルビューワーを開く
					vscode.commands.executeCommand('appgenius-ai.openFileViewer', providedProjectPath);
				} catch (error) {
					Logger.error('代替機能への転送中にエラーが発生しました', error as Error);
					vscode.window.showErrorMessage(`エラーが発生しました: ${(error as Error).message}`);
				}
			})
		);
		Logger.info('DebugDetective fallback command registered successfully');
		
		// モックアップギャラリーを開くコマンドの登録
