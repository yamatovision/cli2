import * as vscode from 'vscode';
import { Logger } from '../../../../utils/logger';
import { IMessageDispatchService } from '../interfaces/IMessageDispatchService';
import { Message } from '../interfaces/common';
import { IProjectService } from '../interfaces/IProjectService';
import { IFileSystemService } from '../interfaces/IFileSystemService';
import { IUIStateService } from '../interfaces/IUIStateService';
import { ISharingService } from '../interfaces/ISharingService';
import { IPanelService } from '../interfaces/IPanelService';
import { IWebViewCommunication } from '../interfaces/IWebViewCommunication';
import { AppGeniusEventBus } from '../../../../services/AppGeniusEventBus';
import { ServiceRegistry } from '../ServiceRegistry';

/**
 * WebViewとバックエンドサービス間のメッセージルーティングを担当するサービス
 * 各サービスへの直接呼び出しをサポートする拡張版
 */
export class MessageDispatchServiceImpl implements IMessageDispatchService {
  private handlers: Map<string, (message: Message, panel: vscode.WebviewPanel) => Promise<void>> = new Map();
  private _disposables: vscode.Disposable[] = [];
  
  // イベントエミッター
  private _onMessageProcessed = new vscode.EventEmitter<{command: string, success: boolean}>();
  public readonly onMessageProcessed = this._onMessageProcessed.event;
  
  // 依存サービス
  private _sharingService?: ISharingService;
  private _projectService?: IProjectService;
  private _fileSystemService?: IFileSystemService;
  private _uiStateService?: IUIStateService;
  private _panelService?: IPanelService;
  
  // イベントバス
  private _eventBus: AppGeniusEventBus;
  
  // シングルトンインスタンス
  private static _instance: MessageDispatchServiceImpl;
  
  /**
   * シングルトンインスタンスを取得
   */
  public static getInstance(): MessageDispatchServiceImpl {
    if (!MessageDispatchServiceImpl._instance) {
      MessageDispatchServiceImpl._instance = new MessageDispatchServiceImpl();
    }
    return MessageDispatchServiceImpl._instance;
  }
  
  /**
   * コンストラクタ
   */
  private constructor() {
    this._eventBus = AppGeniusEventBus.getInstance();
    
    // イベントリスナーの設定
    this._setupEventListeners();
    
    // サービスレジストリに登録
    ServiceRegistry.getInstance().registerMessageDispatchService(this);
    
    Logger.info('MessageDispatchServiceImpl: 初期化完了');
  }
  
  /**
   * イベントバスリスナーを設定
   */
  private _setupEventListeners(): void {
    // 自分自身が発行したイベントは無視（循環を防止）
    this._eventBus.onEvent((event) => {
      if (event.source === 'MessageDispatchService') {
        return;
      }
      
      // 特定の条件を満たすイベントのみを処理
      if (typeof event.data === 'object' && event.data && 
          ('command' in event.data || 'success' in event.data)) {
        this._onMessageProcessed.fire({
          command: event.data.command || '',
          success: event.data.success || false
        });
      }
    });
    
    Logger.debug('MessageDispatchServiceImpl: イベントリスナーを設定しました');
  }
  
  /**
   * 依存サービスを設定
   */
  public setDependencies(services: {
    sharingService?: any;
    projectService?: any;
    fileSystemService?: any;
    uiStateService?: any;
    panelService?: any;
  }): void {
    if (services.sharingService) {
      this._sharingService = services.sharingService;
    }
    
    if (services.projectService) {
      this._projectService = services.projectService;
    }
    
    if (services.fileSystemService) {
      this._fileSystemService = services.fileSystemService;
    }
    
    if (services.uiStateService) {
      this._uiStateService = services.uiStateService;
    }
    
    if (services.panelService) {
      this._panelService = services.panelService;
    }
    
    // 各サービスのWebViewコミュニケーション機能を登録
    this._registerServiceHandlers();
    
    Logger.debug('MessageDispatchServiceImpl: 依存サービスを設定しました');
  }
  
  /**
   * 各サービスのメッセージハンドラを登録
   */
  private _registerServiceHandlers(): void {
    // 各サービスがIWebViewCommunicationを実装している場合、ハンドラを登録
    if (this._fileSystemService && 'registerMessageHandlers' in this._fileSystemService) {
      (this._fileSystemService as unknown as IWebViewCommunication).registerMessageHandlers(this);
      Logger.debug('MessageDispatchServiceImpl: FileSystemServiceのハンドラを登録しました');
    }
    
    if (this._projectService && 'registerMessageHandlers' in this._projectService) {
      (this._projectService as unknown as IWebViewCommunication).registerMessageHandlers(this);
      Logger.debug('MessageDispatchServiceImpl: ProjectServiceのハンドラを登録しました');
    }
    
    if (this._sharingService && 'registerMessageHandlers' in this._sharingService) {
      (this._sharingService as unknown as IWebViewCommunication).registerMessageHandlers(this);
      Logger.debug('MessageDispatchServiceImpl: SharingServiceのハンドラを登録しました');
    }
    
    if (this._uiStateService && 'registerMessageHandlers' in this._uiStateService) {
      (this._uiStateService as unknown as IWebViewCommunication).registerMessageHandlers(this);
      Logger.debug('MessageDispatchServiceImpl: UIStateServiceのハンドラを登録しました');
    }
    
    if (this._panelService && 'registerMessageHandlers' in this._panelService) {
      (this._panelService as unknown as IWebViewCommunication).registerMessageHandlers(this);
      Logger.debug('MessageDispatchServiceImpl: PanelServiceのハンドラを登録しました');
    }
  }
  
  /**
   * WebViewパネルにメッセージを送信
   */
  public sendMessage(panel: vscode.WebviewPanel, message: Message): void {
    try {
      panel.webview.postMessage(message);
      
      // 最小限のログ出力
      if (message.command && message.command !== 'updateMarkdownContent' && message.command !== 'updateDirectoryStructure') {
        Logger.debug(`MessageDispatchServiceImpl: 送信: ${message.command}`);
      }
    } catch (error) {
      Logger.error(`MessageDispatchServiceImpl: メッセージ「${message.command}」の送信に失敗`, error as Error);
      
      // 重要なメッセージのみリトライ
      if (message.priority === 'high') {
        try {
          setTimeout(() => panel.webview.postMessage(message), 100);
        } catch (retryError) {
          // エラーログは出力しない（重複防止）
        }
      }
    }
  }
  
  /**
   * メッセージハンドラを登録
   */
  public registerHandler(command: string, handler: (message: Message, panel: vscode.WebviewPanel) => Promise<void>): void {
    this.handlers.set(command, handler);
    Logger.debug(`MessageDispatchServiceImpl: ハンドラを登録: ${command}`);
  }
  
  /**
   * 複数のメッセージハンドラを一括登録
   */
  public registerHandlers(handlers: Map<string, (message: Message, panel: vscode.WebviewPanel) => Promise<void>>): void {
    handlers.forEach((handler, command) => {
      this.registerHandler(command, handler);
    });
    Logger.debug(`MessageDispatchServiceImpl: ${handlers.size}個のハンドラを一括登録`);
  }
  
  /**
   * WebViewからのメッセージを処理
   */
  public async handleMessage(message: Message, panel: vscode.WebviewPanel): Promise<void> {
    try {
      // コマンド名のみログ出力
      Logger.debug(`MessageDispatchServiceImpl: 受信: ${message.command}`);
      
      // サービスタイプがある場合は対応するサービスを直接呼び出す
      if (message.serviceType) {
        await this._routeToService(message, panel);
        return;
      }
      
      // 従来のハンドラベースルーティング
      const handler = this.handlers.get(message.command);
      if (handler) {
        await handler(message, panel);
        this._onMessageProcessed.fire({ command: message.command, success: true });
      } else {
        Logger.warn(`MessageDispatchServiceImpl: ハンドラが未登録のコマンド: ${message.command}`);
        this._onMessageProcessed.fire({ command: message.command, success: false });
      }
    } catch (error) {
      Logger.error(`MessageDispatchServiceImpl: エラー: ${message.command}`, error as Error);
      this.showError(panel, `操作中にエラーが発生しました: ${(error as Error).message}`);
      this._onMessageProcessed.fire({ command: message.command, success: false });
    }
  }
  
  /**
   * メッセージを対応するサービスに転送
   */
  private async _routeToService(message: Message, panel: vscode.WebviewPanel): Promise<void> {
    try {
      let service: any = null;
      
      // サービスタイプに応じたサービスを取得
      switch (message.serviceType) {
        case 'fileSystem':
          service = this._fileSystemService;
          break;
        case 'project':
          service = this._projectService;
          break;
        case 'sharing':
          service = this._sharingService;
          break;
        case 'uiState':
          service = this._uiStateService;
          break;
        case 'panel':
          service = this._panelService;
          break;
        default:
          throw new Error(`不明なサービスタイプ: ${message.serviceType}`);
      }
      
      if (!service) {
        throw new Error(`サービスが見つかりません: ${message.serviceType}`);
      }
      
      // コマンドに対応するメソッドを呼び出す
      if (typeof service[message.command] === 'function') {
        // サービスの該当メソッドを呼び出し
        const result = await service[message.command](message, panel);
        
        // リクエストIDがある場合は結果を返す
        if (message.requestId) {
          this.sendMessage(panel, {
            command: 'response',
            requestId: message.requestId,
            data: result
          });
        }
        
        this._onMessageProcessed.fire({ command: message.command, success: true });
      } else {
        throw new Error(`メソッドが見つかりません: ${message.command}`);
      }
    } catch (error) {
      Logger.error(`サービスルーティングエラー: ${message.serviceType}.${message.command}`, error as Error);
      
      // リクエストIDがある場合はエラーを返す
      if (message.requestId) {
        this.sendMessage(panel, {
          command: 'response',
          requestId: message.requestId,
          error: (error as Error).message
        });
      } else {
        // 通常のエラー表示
        this.showError(panel, `${message.serviceType}サービスでエラーが発生: ${(error as Error).message}`);
      }
      
      this._onMessageProcessed.fire({ command: message.command, success: false });
    }
  }
  
  /**
   * WebViewからのメッセージ受信処理を設定
   */
  public setupMessageReceiver(panel: vscode.WebviewPanel): vscode.Disposable {
    const disposable = panel.webview.onDidReceiveMessage(
      async (message) => {
        await this.handleMessage(message, panel);
      },
      null,
      this._disposables
    );
    
    Logger.info('MessageDispatchServiceImpl: WebViewからのメッセージ受信処理を設定しました');
    return disposable;
  }
  
  /**
   * 成功メッセージを表示
   */
  public showSuccess(panel: vscode.WebviewPanel, message: string): void {
    this.sendMessage(panel, {
      command: 'showSuccess',
      message,
      priority: 'high'
    });
  }
  
  /**
   * エラーメッセージを表示
   */
  public showError(panel: vscode.WebviewPanel, message: string): void {
    const errorMessage = message || 'エラーが発生しました（詳細情報がありません）';
    this.sendMessage(panel, {
      command: 'showError',
      message: errorMessage,
      priority: 'high'
    });
  }
  
  /**
   * リソース解放
   */
  public dispose(): void {
    this._onMessageProcessed.dispose();
    
    while (this._disposables.length) {
      const disposable = this._disposables.pop();
      if (disposable) {
        disposable.dispose();
      }
    }
    
    this.handlers.clear();
    
    Logger.info('MessageDispatchServiceImpl: リソースを解放しました');
  }
}