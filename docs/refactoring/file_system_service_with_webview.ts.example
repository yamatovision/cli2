import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import { Logger } from '../../../../utils/logger';
import { IFileSystemService } from '../interfaces/IFileSystemService';
import { IWebViewCommunication } from '../interfaces/IWebViewCommunication';
import { Message } from '../interfaces/common';
import { IMessageDispatchService } from '../interfaces/IMessageDispatchService';

/**
 * WebView通信機能を備えたファイルシステムサービスの実装例
 */
export class FileSystemServiceImpl implements IFileSystemService, IWebViewCommunication {
  private _messageDispatchService: IMessageDispatchService | null = null;
  
  constructor() {
    // 初期化処理
  }
  
  // IWebViewCommunication インターフェイスの実装
  
  /**
   * WebViewにメッセージを送信
   */
  public sendToWebView(panel: vscode.WebviewPanel, message: Message): void {
    if (this._messageDispatchService) {
      this._messageDispatchService.sendMessage(panel, message);
    } else {
      Logger.warn('FileSystemServiceImpl: メッセージディスパッチサービスが設定されていません');
      try {
        // フォールバック: 直接WebViewにメッセージを送信
        panel.webview.postMessage(message);
      } catch (error) {
        Logger.error(`FileSystemServiceImpl: メッセージ送信に失敗: ${message.command}`, error as Error);
      }
    }
  }
  
  /**
   * WebViewにエラーメッセージを表示
   */
  public showError(panel: vscode.WebviewPanel, errorMessage: string): void {
    this.sendToWebView(panel, {
      command: 'showError',
      message: errorMessage,
      priority: 'high'
    });
  }
  
  /**
   * WebViewに成功メッセージを表示
   */
  public showSuccess(panel: vscode.WebviewPanel, successMessage: string): void {
    this.sendToWebView(panel, {
      command: 'showSuccess',
      message: successMessage,
      priority: 'high'
    });
  }
  
  /**
   * メッセージハンドラを登録
   */
  public registerMessageHandlers(messageDispatchService: IMessageDispatchService): void {
    this._messageDispatchService = messageDispatchService;
    
    // 例: ファイル読み込みハンドラ
    messageDispatchService.registerHandler('readMarkdownFile', async (message: Message, panel: vscode.WebviewPanel) => {
      if (!message.filePath) {
        this.showError(panel, 'ファイルパスが指定されていません');
        return;
      }
      
      try {
        const content = await this.readMarkdownFile(message.filePath);
        this.sendToWebView(panel, {
          command: 'updateMarkdownContent',
          content,
          timestamp: Date.now(),
          priority: 'high',
          filePath: message.filePath
        });
      } catch (error) {
        this.showError(panel, `ファイル読み込みに失敗: ${(error as Error).message}`);
      }
    });
    
    // 例: ファイルブラウザ更新ハンドラ
    messageDispatchService.registerHandler('refreshFileBrowser', async (message: Message, panel: vscode.WebviewPanel) => {
      try {
        const path = message.path || message.projectPath;
        if (!path) {
          this.showError(panel, 'パスが指定されていません');
          return;
        }
        
        const structure = await this.getDirectoryStructure(path);
        this.sendToWebView(panel, {
          command: 'updateDirectoryStructure',
          structure,
          projectPath: path
        });
      } catch (error) {
        this.showError(panel, `ディレクトリ構造の取得に失敗: ${(error as Error).message}`);
      }
    });
    
    // 例: ファイルをエディタで開くハンドラ
    messageDispatchService.registerHandler('openFileInEditor', async (message: Message, panel: vscode.WebviewPanel) => {
      if (!message.filePath) {
        this.showError(panel, 'ファイルパスが指定されていません');
        return;
      }
      
      try {
        await this.openFileInEditor(message.filePath);
        this.showSuccess(panel, `エディタでファイルを開きました: ${path.basename(message.filePath)}`);
      } catch (error) {
        this.showError(panel, `ファイルを開けませんでした: ${(error as Error).message}`);
      }
    });
  }
  
  // IFileSystemService インターフェイスの実装 (既存メソッド)
  // ...
  
  /**
   * マークダウンファイルを読み込む
   */
  public async readMarkdownFile(filePath: string): Promise<string> {
    // 既存の実装
    return '';
  }
  
  /**
   * ディレクトリ構造を取得
   */
  public async getDirectoryStructure(rootPath: string): Promise<any> {
    // 既存の実装
    return {};
  }
  
  /**
   * ファイルをエディタで開く
   */
  public async openFileInEditor(filePath: string): Promise<void> {
    // 既存の実装
  }
  
  /**
   * ファイルタイプを取得
   */
  public getFileType(filePath: string): string {
    // 既存の実装
    return '';
  }
}