import { Logger } from './logger';

/**
 * テンプレート管理サービス
 * アプリケーション全体で使用するテンプレートを一元管理（ハードコード版）
 */
export class TemplateService {
  private static instance: TemplateService;

  private constructor() {}

  /**
   * シングルトンインスタンスを取得
   */
  public static getInstance(): TemplateService {
    if (!TemplateService.instance) {
      TemplateService.instance = new TemplateService();
    }
    return TemplateService.instance;
  }

  /**
   * SCOPE_PROGRESS.mdのテンプレートを取得
   * @returns テンプレート文字列
   */
  public getScopeProgressTemplate(): string {
    return `# [プロジェクト名] 開発進捗状況

## 実装計画と環境設定
ブルーランプの開発は以下のフローに沿って進行します：

| フェーズ | 状態 | 担当エージェント | 解説 |
|---------|------|----------------|------|
| **0. プロジェクト準備** | [x] | - | プロジェクトリポジトリを準備し開発環境を整えます |
| **1. 要件定義** | [ ] | ★1 要件定義クリエイター | あなたのプロジェクトを要件に落とし込みます |
| **2. モックアップ作成** | [ ] | ★2 モックアップクリエイター | プロジェクトに必要なUIモックアップを作成し視覚的にわかりやすく |
| **3. データモデル設計** | [ ] | ★3 データモデルアーキテクト | プロジェクトのデータモデルを組み上げ堅牢な実装に |
| **4. 認証システム設計** | [ ] | ★4 アーキテクチャデザイナー | 認証システムの詳細な設計を行いセキュリティを担保 |
| **5. 実装計画書作成** | [ ] | ★5 実装計画プランナー | 実装の順番の計画を立てて効果的にプロジェクトを組み上げます |
| **6. 環境変数設定** | [ ] | ★6 環境変数収集アシスタント | 本番環境で動作するための秘密鍵を取得し設定しよう |
| **7. プロトタイプ実装** | [ ] | ★7 プロトタイプ実装エージェント | まずはフロントエンドのプロトタイプから作りましょう |
| **8. バックエンド実装** | [ ] | ★8 バックエンド実装エージェント | いよいよバックエンドの実装に入ります |
| **9. テスト品質検証** | [ ] | ★9 テスト品質エンジニア | テスト検証してバックエンドの品質を担保しよう |
| **10. API統合** | [ ] | ★10 API統合エージェント | プロトタイプを動くシステムへ |
| **11. デバッグ** | [ ] | ★11 デバッグ探偵 | エラーがあったらデバック探偵にお任せ |
| **12. デプロイ** | [ ] | ★12 デプロイ専門アシスタント | いよいよデプロイ！インターネットに公開しよう！ |

## モックアップ一覧
| ID | ページ名 | チェック |
|----|---------|---------|
| (例) P-001 | ログインページ | [ ] |

## プロトタイプ作成
| 番号 | フェーズ | ページID | ページ名 | モックアップ | 実装 |
|------|---------|---------|---------|-------------|------|
| (例) 1.1 | Phase 1 | - | ルーティング設定 | - | [ ] |

## API実装タスクリスト
| タスク番号 | エンドポイント | メソッド | 説明 | 認証要否 | 対応フロントエンドページ | バックエンド実装 | テスト通過 | FE繋ぎ込み |
|-----------|--------------|---------|------|----------|----------------------|--------------|------------|------------|
| (例) 1.1 | /api/auth/login | POST | ログイン | 不要 | ログインページ | [ ] | [ ] | [ ] |


`;
  }

  /**
   * テンプレートを処理して変数を置換
   * @param template テンプレート文字列
   * @param variables 置換変数のマップ
   * @returns 処理済みテンプレート
   */
  public processTemplate(template: string, variables: Record<string, string>): string {
    let result = template;

    // 変数置換
    for (const [key, value] of Object.entries(variables)) {
      // ${KEY}形式と[KEY]形式の両方に対応
      const regex1 = new RegExp(`\\$\\{${key}\\}`, 'g');
      const regex2 = new RegExp(`\\[${key}\\]`, 'g');
      result = result.replace(regex1, value).replace(regex2, value);
    }

    return result;
  }
}
